{"version":3,"file":"DprObserver.esm.js","sources":["../src/helper.js","../src/index.js"],"sourcesContent":["/**\n * Provide a function to get current `devicePixelRatio`.\n * `devicePixelRatio` may be modified after browser's zoom\n */\nexport function getDevicePixelRatio() {\n  let dpr = 1\n  // If in browser environment\n  if (typeof window !== 'undefined') {\n    dpr = window.devicePixelRatio || (window.screen.deviceXDPI / window.screen.logicalXDPI) || 1\n  }\n  return dpr\n}\n\nexport function supportMatchMedia() {\n  return typeof window !== 'undefined' && typeof window.matchMedia === 'function'\n}\n","import { getDevicePixelRatio, supportMatchMedia } from './helper'\n\nconst matchMediaSupported = supportMatchMedia()\n\n/**\n * An observer for listening to the change of device pixel ratio\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio\n */\nclass DprObserver {\n\n  constructor(onchange) {\n    if (!matchMediaSupported) {\n      throw new Error('DprObserver cannot run without `matchMedia` supported!')\n    }\n    if (typeof onchange !== 'function') {\n      throw new Error('the required param `onchange` must be a function!')\n    }\n    this._onchange = onchange\n    this._init()\n  }\n\n  _init() {\n    const dpr = getDevicePixelRatio()\n    const mqString = `(resolution: ${dpr}dppx)`\n    this._mediaMatcher = window.matchMedia(mqString)\n    this._mediaMatcher.addListener(\n      this._updateListener = () => {\n        this._onchange(getDevicePixelRatio())\n\n        // recreate the media mather with the new dpr\n        this._disposeMediaMatcher()\n        this._init()\n      }\n    )\n  }\n\n  _disposeMediaMatcher() {\n    if (this._mediaMatcher) {\n      this._mediaMatcher.removeListener(this._updateListener)\n      this._mediaMatcher = null\n    }\n    this._updateListener = null\n  }\n\n  /**\n   * Dispose the observer\n   */\n  dispose() {\n    this._disposeMediaMatcher()\n    this._onchange = null\n  }\n\n  /**\n   * Get current device pixel ratio\n   * @return {Number} Current device pixel ratio\n   */\n  getDpr() {\n    return getDevicePixelRatio()\n  }\n\n}\n\nexport default DprObserver\n"],"names":["getDevicePixelRatio","dpr","window","devicePixelRatio","screen","deviceXDPI","logicalXDPI","supportMatchMedia","matchMedia","matchMediaSupported","DprObserver","onchange","Error","_onchange","_init","mqString","_mediaMatcher","addListener","_updateListener","_disposeMediaMatcher","removeListener","dispose","getDpr"],"mappings":"AAAA;AACA;AACA;AACA;AACO,SAASA,mBAAT,GAA+B;AACpC,MAAIC,GAAG,GAAG,CAAV,CADoC;;AAGpC,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,IAAAA,GAAG,GAAGC,MAAM,CAACC,gBAAP,IAA4BD,MAAM,CAACE,MAAP,CAAcC,UAAd,GAA2BH,MAAM,CAACE,MAAP,CAAcE,WAArE,IAAqF,CAA3F;AACD;;AACD,SAAOL,GAAP;AACD;AAEM,SAASM,iBAAT,GAA6B;AAClC,SAAO,OAAOL,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACM,UAAd,KAA6B,UAArE;AACD;;ACbD,IAAMC,mBAAmB,GAAGF,iBAAiB,EAA7C;AAEA;AACA;AACA;AACA;AACA;;IACMG;AAEJ,uBAAYC,QAAZ,EAAsB;AACpB,QAAI,CAACF,mBAAL,EAA0B;AACxB,YAAM,IAAIG,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,QAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,SAAKC,SAAL,GAAiBF,QAAjB;;AACA,SAAKG,KAAL;AACD;;;;SAEDA,QAAA,iBAAQ;AAAA;;AACN,QAAMb,GAAG,GAAGD,mBAAmB,EAA/B;AACA,QAAMe,QAAQ,qBAAmBd,GAAnB,UAAd;AACA,SAAKe,aAAL,GAAqBd,MAAM,CAACM,UAAP,CAAkBO,QAAlB,CAArB;;AACA,SAAKC,aAAL,CAAmBC,WAAnB,CACE,KAAKC,eAAL,GAAuB,YAAM;AAC3B,MAAA,KAAI,CAACL,SAAL,CAAeb,mBAAmB,EAAlC,EAD2B;;;AAI3B,MAAA,KAAI,CAACmB,oBAAL;;AACA,MAAA,KAAI,CAACL,KAAL;AACD,KAPH;AASD;;SAEDK,uBAAA,gCAAuB;AACrB,QAAI,KAAKH,aAAT,EAAwB;AACtB,WAAKA,aAAL,CAAmBI,cAAnB,CAAkC,KAAKF,eAAvC;;AACA,WAAKF,aAAL,GAAqB,IAArB;AACD;;AACD,SAAKE,eAAL,GAAuB,IAAvB;AACD;AAED;AACF;AACA;;;SACEG,UAAA,mBAAU;AACR,SAAKF,oBAAL;;AACA,SAAKN,SAAL,GAAiB,IAAjB;AACD;AAED;AACF;AACA;AACA;;;SACES,SAAA,kBAAS;AACP,WAAOtB,mBAAmB,EAA1B;AACD;;;;;;;"}